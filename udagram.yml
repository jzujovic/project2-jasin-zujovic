Description: CD12352 - Infrastructure as Code Project - Udagram

Parameters:
  
  ProjectName:
    Description: Project name
    Type: String
    Default: project2-jasin-zujovic

  DesiredCapacity:
    Description: Desired number of instances
    Type: String
    Default: 1

Resources:
  
  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub "${ProjectName}-web-servers"
      LaunchTemplateData:
        UserData:
          Fn::Base64: |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install nginx -y
            sudo service nginx start
            sudo cat <<EOF > /var/www/html/index.html
            it works! Udagram, Udacity
            EOF
        ImageId: ami-005fc0f236362e99f
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref WebAppSecurityGroup
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        BlockDeviceMappings:
          - DeviceName: /dev/sdh
            Ebs:
              VolumeSize: '10'

  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to web servers from load balancer, and Internet access for web servers
      VpcId:
        Fn::ImportValue:
          !Sub "${ProjectName}-vpc"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${ProjectName}-private-subnet-list"
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MinSize: 1
      DesiredCapacity: !Ref DesiredCapacity
      MaxSize: 5
      TargetGroupARNs:
        - !Ref WebAppTargetGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${ProjectName}-vpc"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${ProjectName}-public-subnet-1"
        - Fn::ImportValue: !Sub "${ProjectName}-public-subnet-2"
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: '80'
      Protocol: HTTP

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-vpc

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-s3-bucket-20242411204351"
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  PublicReadBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref S3Bucket
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: "*"
            Action: 
              - "s3:GetObject"
            Resource: 
              - !Sub "arn:aws:s3:::${S3Bucket}/*"

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-s3-access
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 's3:PutObject'
              - 's3:GetObject'
              Resource:
                - !GetAtt S3Bucket.Arn

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref IAMRole

Outputs:

  PublicURL:
    Description: Public load balancer URL
    Value: !Sub http://${LoadBalancer.DNSName}
    Export:
      Name: !Sub ${ProjectName}-public-url
